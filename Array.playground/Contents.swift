// MARK: Массивы.

/* “Массив (Array) — это упорядоченная коллекция однотипных элементов, для доступа к которым используются целочисленные индексы.
    Упорядоченной называется коллекция, в которой элементы располагаются в порядке, определенном разработчиком.
    Каждый элемент массива — это пара «индекс — значение».
    Индекс элемента массива — это целочисленное значение, используемое для доступа к значениям элемента. Индексы генерируются автоматически при добавлении новых элементов. Индексы в массивах начинаются с нуля (не с единицы!). К примеру, у массива, содержащего 5 элементов, индекс первого равен 0, а последнего — 4. Индексы всегда последовательны и неразрывны. Удаляя некоторый элемент, индексы всех последующих уменьшатся на единицу, чтобы обеспечить неразрывность.
    Значение элемента массива — это произвольное значение определенного типа данных. Как говорилось ранее, значения доступны по соответствующим им индексам. Значения всех элементов массива должны быть одного и того же типа данных.” */



// MARK: - “Создание массива с помощью Array(arrayLiteral:)”
var arrayLit = Array(arrayLiteral: "one", "two", "three")



// MARK: - Также для создания массива можно использовать глобальную функцию Array(_:), которой в качестве входного аргумента необходимо передать произвольную последовательность (Sequence).”
var arraySequence1 = Array(0...10)
var arraySequence2 = Array(0..<11)



// MARK: - Array(repeating:count:)
var arrayRepeating = Array(repeating: "Три", count: 3)



// MARK: - “Доступ к элементам массива”
arrayLit[2]

arraySequence1[10] = 100
arraySequence1

arraySequence2[5...10] = [100]
arraySequence2



// MARK: - “Массив является значимым типом (valuetype), а не ссылочным (referencetype). Это означает, что при передаче значения массива из одного параметра в другой создается его копия, редактирование которой не влияет на исходную коллекцию.”

let parentArray = ["one", "two", "three"]
var copyParentArray = parentArray
copyParentArray
copyParentArray[1] = "four"
parentArray
copyParentArray



// MARK: - Создание пустого массива
let emptyArray: [String] = []
let anotherEmptyArray = [String]()



// MARK: - Сравнения массивов
/*  “Два массива являются эквивалентными:
    • если количество элементов в сравниваемых массивах одинаково;
    • каждая соответствующая пара элементов эквивалентна (имеют одни и те же типы данных и значения).” */

let a1 = 1
let a2 = 2
let a3 = 3
let someArray: [Int] = [1, 2, 3]
someArray == [a1, a2, a3]



// MARK: - Слияние массивов
let charsOne = ["a", "b", "c"]
let charsTwo = ["d", "e", "f"]
let charsThree = ["f", "g", "h"]

var alphabet = charsOne + charsTwo
alphabet += charsThree



// MARK: - Многомерные массивы
/* “Элементами массива могут быть значения не только фундаментальных типов, но и любых других типов данных, включая сами массивы. Массивы, элементами которых также являются массивы, называются многомерными. Необходимо обеспечить единство типа всех вложенных массивов.” */

var arrayOfArrays = [[1,2,3], [4,5,6], [7,8,9]]
arrayOfArrays[2]
arrayOfArrays[2][1]



// MARK: - Базовые свойства и методы массивов

// Свойство count возвращает кол-во элементов в массиве.
let arrayCount = [1, 2, 3, 4, 5]
arrayCount.count

// Если значение свойства count равно нулю, то и свойство isEmpty возвращает true.
let arrayEmpty: [Int] = []
arrayCount.isEmpty
arrayEmpty.isEmpty

// Другим средством получить множество элементов массива является метод suffix(_:) — в качестве входного параметра ему передается количество элементов, которые необходимо получить. Элементы отсчитываются с последнего элемента массива”.
let someArray2 = [1, 2, 3, 4, 5]
someArray2.suffix(3)

// “С помощью метода append(_:) можно добавить новый элемент в конец массива”
var someArray3 = [1, 2, 3]
someArray3.append(4)

// “Если массив хранится в переменной (то есть является изменяемым), то метод insert(_:at:) вставляет в массив новый одиночный элемент с указанным индексом”
var someArray4 = [1, 2, 3]
someArray4.insert(666, at: 1)

// “Так же как в случае изменения массива, методы remove(at:), removeFirst() и removeLast() позволяют удалять требуемые элементы. При этом они возвращают значение удаляемого элемента (листинг 6.22).
var someArray5 = [1, 2, 3, 4, 5, 6, 7, 8]
someArray5.remove(at: 2)
someArray5.removeFirst()
someArray5.removeLast()
someArray5

// “Для редактирования массива также можно использовать методы dropFirst(_:) и dropLast(_:), возвращающие новый массив, в котором отсутствует несколько первых или последних элементов, но при этом не изменяющие исходную коллекцию. Если в качестве входного аргумента ничего не передавать, то из результата удаляется один элемент, в противном случае — столько элементов, сколько передано”
var numArray = [2, 3, 4, 5]
// удаляем последний элемент
numArray.dropLast() // [2, 3, 4]
// удаляем три первых элемента
let anotherNumArray = numArray.dropFirst(3)
numArray

// “Метод contains(_:) определяет факт наличия некоторого элемента в массиве и возвращает Bool в зависимости от результата (листинг 6.24).”
someArray5.contains(2)
someArray5.contains(22020)

// “Для поиска минимального или максимального элемента в массиве применяются методы min() и max().”
someArray5.min()
someArray5.max()

// “Чтобы изменить порядок следования всех элементов массива на противоположный, используйте метод reverse()”
var someArray6 = [1, 2, 3, 4, 5]
someArray6.reverse()

// “Методы sort() и sorted() позволяют отсортировать массив по возрастанию. Разница между ними состоит в том, что sort() сортирует саму последовательность, для которой он вызван, а sorted(), заменяя оригинальный массив, возвращает отсортированную коллекцию”
var someArray7 = [1, 5, 6, 3, 5, 88, 21, 12]
// метод sorted() возвращает отсортированную последовательность и при этом исходный массив не изменяется”
let sortedArray = someArray7.sorted()
// метод sort() изменяет исходный массив”
someArray7.sort()

/* “Разработчики Swift с умом подошли к именованию доступных методов. В большинстве случаев если какой-либо метод заканчивается на -ed, то он, не трогая исходное значение, возвращает его измененную копию. Аналогичный метод без -ed на конце модифицирует саму последовательность.” */

// “Метод randomElement() позволяет получить случайный элемент массива”
let randomArray = [1, 2, 3, 4, 5, 6, 7, 8, 9]
randomArray.randomElement()

// Метод map
let arrayMap = [1, 2, 3, 4, 5, 6]
print(arrayMap.map{ $0 * $0 })

// Метод forEach, который перебирает все элементы
let arrayForEach = [1, 2, 3, 4, 5]
arrayForEach.forEach{ print($0) }

// Метод enumerated, с помощью него можно получить индекс и значение элемента
let arrayEnumerated = [7, 8, 9]

for (index, item) in arrayEnumerated.enumerated() {
    print("Index: \(index), item: \(item)")
}

// Метод prefix, перебор элементов пока условие возвращает true. (возвращает отфильтрованный массив)
let arrayPrefix = [1, 2, 3, 4, 5, 6]
print(arrayPrefix.prefix(while: { $0 < 4 }))
 
// Противоположным образом работает метод drop() - он, наоборт, удаляет все элементы до того, пока они не станут соответствовать условию

print(arrayPrefix.drop(while: { $0 < 4 }))
